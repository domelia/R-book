---
title: "Установка и начало работы с R"
---

## Установка R

Прежде, чем начать работать с R нам нужно установить его себе на компьютер. Для этого необходимо перейти по ссылке и выбрать версию, подходящую для вашей операционной системы (ссылка ниже ведет на версию для Windows): <https://cran.r-project.org/bin/windows/base/>

Вместе с R устанавливается небольшая консоль, в которой можно набирать команды на R, но работать в ней не очень удобно, поэтому большинство пользователей предпочитает работать со специальным интерфейсом, или интегрированной средой разработки (Integrated Development Environement, IDE). Наиболее популярной IDE является RStudio (с другими средами, в которых можно работать в R, такими как Visual Studio, Emacs, Eclipse и другими, Вы можете познакомиться самостоятельно).

Это бесплатная программа, скачать которую можно по ссылке.

<https://posit.co/products/open-source/rstudio/>

Шаги по установке не очень трудны и не потребуют каких-то особых навыков, но на всякий случай, можно обратиться к однму из обучающих видео:

Как установить R:

{{< video https://vimeo.com/203516510 >}}

Как установить RStudio:

{{< https://vimeo.com/203516968 >}}

::: callout-note
В комьютерных классах устанавливать ничего не нужно, эти инструкции пригодятся для домашнего использования.
:::

::: callout-tip
## RStudio online

Кроме "стационарного" использования RStudio, компания Posit предоставляет возможность использования облачных технологий для работы с RStudio онлайн. Бесплатный план позволяет создать до 25 проектов и предоставляет 25 часов в месяц вычислительного времени. Этого будет достаточно для наших учебных проектов. Для получения доступа к Posit Cloud необходимо зарегистрироваться на сайте <https://posit.cloud/> или войти с помощью социальных сетей и создать новый проект.
:::

## Начало работы с R и RStudio

После первого запуска RStudio вы, скорее всего, увидите вот такую картину:

![](https://media.geeksforgeeks.org/wp-content/uploads/20200331115627/fig13.jpg)

Основное окно RStudio будет состоять из трех частей (экранов).

Слева находится **консоль** (Console) - здесь можно писать код, и здесь же будут появляться результаты его выполнения, а также различные сообщения, с помощью которых R "общается" с пользователями.

Справа сверху - **рабочее окружение** (Environment) - здесь хранятся создаваемые и загружаемые объекты - данные (вектора, датафреймы и пр.), пользовательские функции и некоторые другие объекты.

Окружение является структурой данных, предназначенной для обеспечения области видимости. Это коллекция каких-то объектов (переменных, функций, массивов данных), которые мы используем. Хэдли Уикхэм предлагает относиться к окружению как к "мешку с именами", :

![](http://adv-r.had.co.nz/diagrams/environments.png/bag-of-names.png)

Есть четыре типа окружений:

-   *Глобальное* окружение - интерактивное пространство, где мы обычно работаем.

-   *Базовое* окружение, создаваемое базовым пакетом R.

-   *Пустое* окружение, не имеющее никаких имен. Является в большей степени абстракцией, хотя и может быть создано с помощью специальной функции.

-   *Текущее* окружение, то есть то, в котором мы работаем в какой-то момент времени.

    Обычно мы не задумываемся над тем, в каком окружении работаем. Это становится важным тогда, когда возникают конфликты функций и ошибки выполняемого кода. Окружение создается автоматически при запуске программы RStudio.

В этом же окне можно посмотреть **историю** (History) выполнения кода, и если вы случайно или специально что-то удалили, часто именно в истории можно найти строки, которые были выполнены, и их можно восстановить. Здесь есть некоторые другие вкладки, они нам понадобятся на более поздних этапах работы с R и RStudio.

Справа снизу - **окно** **просмотра**. В отдельных вкладках можно посмотреть, какие файлы и папки есть в рабочей директории, какие библиотеки установлены, можно запросить помощь или посмотреть графики (в процессе анализа).

Это только в первый раз окна всего три.

Выберите в меню File - New File - R Script:

![](https://raw.githubusercontent.com/domelia/rcourse/main/inst/tutorials/lesson1/images/4.png)

Откроется новый файл, и окон станет четыре:

![](https://raw.githubusercontent.com/domelia/rcourse/main/inst/tutorials/lesson1/images/5.png){width="80%"}

В этом новом окне можно писать код и комментарии, сохранять его как отдельный файл с расширением .R, который можно запускать повторно, что очень удобно и позволяет значительно сохранить время при рутинной обработке данных. Очень часто в ходе обработки и анализа данных приходится осуществлять повторяющиеся действия, и скрипт поможет ускорить процесс обработки. В этом состоит основное отличие от консоли, где код можно запустить только однажды.

## Первые простые действия в R

Все естественные языки содержат некоторые правила, описывающие то, как язык должен быть использован, и позволяющие носителям языка понимать друг друга без проблем.

В языках программирования, и в R, в частности, тоже есть такие правила, которые нужно соблюдать для того, чтобы компьютер понял, что от него требуется. В обычном языке правила иногда меняются или не соблюдаются, что не мешает людям понимать друг друга. С R, однако такой номер не пройдет, правила являются фиксированными, и требуется их неукоснительное соблюдение, чтобы не возникало ошибок.

Рассмотрим некоторые, самые базовые правила.

### Команды R

Как большинство других языков программирования, R состоит из совокупности команд, формирующих последовательность инструкций, которые выполняет компьютер. Можно условно рассматривать такие команды в качестве глаголов, которые обозначают какие-то действия, которые выполняет R для получения определенного результата.

Например:

```{r echo=TRUE}
print("Привет, мир!")
```

Эта команда выполняет вывод на экран сообщения. Код на R обычно содержит множество команд, и обычно, каждая команда распологается на своей строке. Примеры:

```{r print, echo=TRUE}
print("Сегодня хорошая погода")
print(1+1)
print(4 > 5)
```

Первая команда выводит сообщение, вторая - производит математические действия третья - оценивает истинность или ложность утверждения и выводит результат.

Обычно каждая команда находится в своей строке, но можно их писать и в одну строку, разделяя точкой с запятой:

```{r line, echo=TRUE}
x <- 1+1; print(x); print(x^2)
```

В этом примере три команды приведены в одной строке. Первая команда создает переменную `x`, вторая выводит на экран значения этой переменной, третья - вычисляет квадрат значений переменной `x` и выводит результат на экран. Точка с запятой используется в качестве знака окончания команды и подсказывает R, где заканчивается одна команда и начинается другая. Если строка содержит только одну команду, точку с запятой можно не ставить, но если поставить, это не будет ошибкой:

```{r line2, echo=TRUE}
print("Здесь нет точки с запятой")
print("А здесь есть точка с запятой");
```

::: callout-important
Если включить несколько знаков точки с запятой, например, `print(“hello”);;`, ничего работать не будет!
:::

Итак, мы сейчас попробовали написать код по-разному - каждая команда в одной строке несколько команд в одной строке. А можно ли написать одну команду в несколько строк? Да, если в это сложная команда, в которой необходимо устанавливать несколько аргументов и такая разбивка часто используется для улучшения читаемости кода. Чуть ниже мы увидим, как это может быть.

Можно также заключить часть кода в фигурные скобки, и тогда он будет восприниматься R как единое целое:

```{r line3, echo=TRUE}
{
  print("Тут написан код, который воспринимается как единое целое")
  print(2^3 - 7)
  w <- "hello"
  print(w)
}
```

Код в примере выше оформлен с помощью отступов и так выглядит лучше, но это не обязательно. Можно обойтись и без этих отступов, все будет работать. Отступы (идентирование) никак не влияют на результат, а являются частью форматирования кода для улучшения его читабельности.

```{r line4, echo=TRUE}
{
print("Тут написан код, который воспринимается как единое целое")
print(2^3 - 7)
w <- "hello"
print(w)
}
```

Что это ознчает - сгруппировать код? С практической точки зрения различий мало, но программа воспринимает эти несколько линий вместе и обрабатывает как бы как одну команду. Это в большей степени важно при написании программ на R.

### Полезные подсказки (shortcuts)

В R создано много удобных вещей, для того, чтобы написание кода было более приятным. Например, если выделить слово и нажать на знак кавычек, они поставятся сразу с двух сторон, то же происходит и со скобками.

Еще одной удобной подсказкой является клавиша `tab`, которая работает с функциями и переменными. Начав набирать какую-то команду или переменную, можно нажать клавишу `tab` и выбрать из списка подходящий вариант, что экономит большое количество времени и позволяет избежать ошибок.

### Пустые строки

Пустые линии R игнорирует, но они позволяют организовать код и сделать его более читаемым:

```{r line5, echo=TRUE}
print("Какое небо голубое!")
# Пустая строка есть, но она ничего не меняет

print("А трава зеленая!")
```

### ?

В R имеется очень много сопроводительной документации, доступной по каждой функции и библиотеке, где объясняются особенности работы с ними, приводятся примеры и дается теоретическое обоснование. Чтобы обратиться к этой вспомогательной документации достаточно набрать имя функции, перед которой нужно поставить знак вопроса:

```{r line6, exercise=TRUE}
?print
```

Лучше всего эту команду попробовать в RStudio. Давайте сделаем это!

### ??

Если вдруг вы забыли как точно называется та или иная функция или хотите посмотреть общие материалы по теме, то можно использовать `??`.

```{r, echo=TRUE, eval=FALSE}
??print
```

::: callout-note
Хотите узнать больше о синтаксисе R? Попробуйте набрать ?Syntax в консоли R и нажать на Enter.
:::

### Самостоятельная работа

Давайте создадим наш первый скрипт и сохраним его для истории `r emo::ji("smile")`:

1.  Выберите в меню File - New File - R Script (если Вы этого еще не сделали) или нажать `Ctrl + Shift + N`.
2.  Напишите код, выполняющий простые арифметические действия. Наберите на клавиатуре любое математическое выражение, например, `1+1`. Чтобы выполнить данную команду, нажмите сочетание клавиш `Ctrl + Enter` или кнопку `Run`, которая находится в правом углу меню. Команда выполняется автоматически, сразу же.

```{r echo=TRUE}
1+1
```

Поэспериментируйте с R как с калькулятором, используя информацию об операторах, используемых для математических вычислений:

::: callout-note
## Какие операторы используются для математических действий?

|                 |                                      |
|-----------------|--------------------------------------|
| **Оператор**    | **Описание**                         |
| **+**           | сложение                             |
| \-              | вычитание                            |
| **\***          | умножение                            |
| **/**           | деление                              |
| **\^ или \*\*** | возведение в степень                 |
| **x %% y**      | остато от деления (x mod y) 5%%2 = 1 |
| **x %/% y**     | целая часть при делени 5%/%2 =2      |
:::

Если мы что-то делаем неправильно, в консоли появится сообщение об ошибке:

```{r echo=TRUE, eval=FALSE}

-1+a

```

::: callout-important
## О пользе ошибок

Ошибок и предупреждающих сообщений бояться не надо, напротив, в таких сообщениях практически всегда находится ответ на вопрос, почему такая ошибка возникла, а часто - и возможное решение проблемы.
:::

3.  Напишите код, отображающий текстовое сообщение:

```{r echo=TRUE}
"Привет, Алтайский государственный университет!"

```

4.  Сохраните файл. Файлы скрипта сохраняются с раширением .R, однако есть и другие форматы. Например, объекты, которые создаются в окружении, можно сохранить в формате .Rdata, а в файле .Rhistory может храниться информация о выполненном коде (что вы делали и в какой последовательности).

## Работа с библиотеками

Мы уже выяснили, что базовый язык R в настоящее время используется наряду с многочисленными функциями и библиотеками, разрабатываемыми коллективами ученых и разработчиками из разных стран мира, включая Россию.

Устанавливать новые библиотеки нам придется практически на каждом занятии, поэтому лучше научиться делать это сразу.

Эти библиотеки хранятся в основном в двух местах:

-   [CRAN](https://cran.r-project.org/)
-   [Github](https://github.com/) - нечто вроде социальной сети для программистов, где все друг друга знают, создают совместные проекты и делятся кодом.

::: callout-tip
## Кое-что о библиотеке/пакетах

Мы называем "библиотеку" "библиотекой" и подразумеваем под ней набор каких-то полезных утилит, наборов данных и сопутствующей документации, потому что так принято в русскоязычном сегменте Интернета, посвященном программированию.

Однако, по-английски библиотека называется **package**, то есть "пакет", в котором "упакованы" функции, сопровождающие документы и иногда готовые данные, а вот функция, которая этот пакет подключает - **\``` library()` ``** -- что собственно и переводится как библиотека, такой вот языковый казус. Об этом стоит помнить и слова эти не путать.
:::

### Как установить библиотеку с помощью CRAN

Чтобы скачать и установить нужную библиотеку с помощью CRAN, проще всего воспользоваться меню RStudio. Нужно выбрать пункт меню **Tools** - **Install Packages:**

![](https://raw.githubusercontent.com/domelia/rcourse/main/inst/tutorials/lesson1/images/6.png)

Затем в окне **Packages** необходимо ввести имя нужной библиотеки, например, `dplyr` и нажать на кнопку **Install**. По умолчанию будет стоять "галочка" - Install Dependencies (установить зависимости) - убирать ее не надо, так как это позволить установить не только саму библиотеку, но и другие библиотеки, от которых она зависит и к которым обращается в ходе выполнения функций. В противном случае, могут возникать ошибки, а оно нам надо?

![](https://raw.githubusercontent.com/domelia/rcourse/main/inst/tutorials/lesson1/images/7.png)

### Как установить библиотеку из Github

Не все библиотеки доступны на CRAN, так как эта процедура достаточно сложная и строгая, предполагает несколько проверок (кода, сопроводительной документации). Достаточно частая практика, когда библиотека еще не подана для регистрации на CRAN, разработчики помещают ее на GitHub, откуда ее можно скачать и использовать по назначению. Это позволяет разработчикам получить обратную связь, устранять возможные ошибки, улучшать код.

Чтобы установить нужную библиотеку из GitHub, нам понадобится функция `install_github()`, в которой мы должны указать имя разработчика и название библиотеки. Однако, чтобы выполнить эту функцию, нужна дополнительная библиотека `devtools`. Установить ее можно через CRAN с помощью описанного выше способа. А уже затем, загрузив ее, установить нужную нам библиотеку (получается сложновато, зато мы сразу научимся нужным действиям, потом мы доведем их до автоматизма):

```{r, echo=TRUE, eval=FALSE}
library (devtools)
install_github("DeveloperName/PackageName")

```

### Вопросы для самопроверки

1.  **Какой код нужно написать, чтобы подключить для использования уже установленную библиотеку `tidyverse`?**

    ```{r}
    opts_r <- c(
        answer ="library(tidyverse)",
       "install('tidyverse')",
       "package(tidyverse)"
    )
    ```

    `r longmcq(opts_r)`

2.  **Один талантливый российский программист с именем DenchPokepon создал библиотеку для скачивания статистических данных с сайта [Единой межведомственной информационной статистической системы](https://fedstat.ru/) - fedstatAPIr. Она есть и на CRAN, но предположим, мы хотим загрузить версию разработчика с github c с помощью библиотеки devtools. Как это сделать?**

```{r}
fitb('install_github("DenchPokepon/fedstatAPIr")', ignore_case = FALSE)
```
