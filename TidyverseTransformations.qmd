---
title: Tidyverse и трансформация данных
---

```{r setup, echo=FALSE}
library(kableExtra)
```

```{css, echo = FALSE}
.output {
max-height: 500px;
overflow-y: scroll;
}
```

В рамках данного занятия мы будем работать с библиотекой [tidyverse](https://www.tidyverse.org/), объединяющей возможности нескольких других библиотек и воплощающей общую философию, дизайн и грамматику обработки и анализа данных, разработанную RStudio: ![](https://hbctraining.github.io/Intro-to-R/img/tidyverse_website.png)

Основные библиотеки семейства tidyverse:

-   **ggplot2** - библиотека для создания разнообразных визуализаций на основе пользовательских данных и заданных настроек.
-   **dplyr** - библиотека для основных трансформаций данных (отбор, фильтрация, группировка, создание новых переменных, описательный анализ).
-   **tidyr** - набор функций для подготовки данных к анализу (транспонирование, переструктурированые данных).
-   **readr** работа с данными прямоугольного формата, представленными в формате csv, tsv или fwf.
-   **tibble** - специальная библиотека для работы с датафреймами.
-   **stringr** - набор функций для работы со строковыми переменными.
-   **forcats** - библиотека для работы с факторными (категориальными - номинальными и порядковыми) перемннными.

::: callout-tip
## Tidyverse - все нужные библиотеки в одном месте!

На предыдущем занятии мы осуществляли импорт и экспорт данных, используя некоторые библиотеки, входящие во вселенную `Tidyverse`. Загружая библиотеку Tidyverse, мы автоматически загружаем все остальные, и потребность в загрузке отдельных библиотек отпадает.
:::

## Прямоугольные и непрямоугольные таблицы, а также tidy и messy данные

Данные могут быть представлены в различных формах, но на самом базовом уровне их можно представить в виде двух типов структур: данные представленные в виде прямоугольных таблиц и непрямоугольных данных.

Прямоугольные данные имеют форму прямоугольника (действительно!), то есть каждое значение соответствует какой-то строке и столбцу. Большинство датафреймов содержат как раз прямоугольные данные.

Соответственно непрямоугольные данные не могут так легко распределяться по строкам и столбцам, они, как правило, представляют собой совокупность различных структур данных, в которых между отдельными элементами имеется какое-то сходство. Обычно непрямоугольные данные хранятся в списках.

**Tidy** по-английски означает "чистый, аккуратный, опрятный". По отношению к данным выражение - tidy data - "чистые, правильным образом представленные данные" противопоставляется "messy data" - "грязным данным", представленным в виде, не совсем пригодном или удобном для анализа.

`Tidy data` - это когда данные имеют так называемый "длинный формат" - каждый столбец представляет собой отдельную переменную, а строка - наблюдение или случай.

![](https://www.researchgate.net/publication/338569186/figure/fig1/AS:847073150775297@1578969385585/The-wide-versus-tidy-data-format-for-time-dependent-data-In-the-wide-spreadsheet-like.png){width="400"}

Как из «грязных» данных сделать «чистые»? Как привести набор данных к виду, пригодному для дальнейшего анализа, отобрать нужные переменные, преобразовать их в формат, который нужен для решения аналитической задачи?

В рамках данного раздела будут рассмотрены функции, которые используются для трансформации данных - их чистки, фильтрации, вычисления новых переменных и описательных статистик, а также перевода набора данных из «широкого» в «длинный» и обратно.

В основном мы будем работать с двумя библиотеками семейства `tidyverse` - `dplyr` и `tidyr`.

![](https://dplyr.tidyverse.org/logo.png), ![](https://tidyr.tidyverse.org/logo.png)

Эти библиотеки является одними из лучших для разнообразных трансформаций данных, потребность в которых возникает постоянно в процессе анализа.

Рассмотрим основные функции на примере набора данных `flights` из библиотеки - `nycflights13`, в котором содержится информация о 336 776 полетах, совершенных из аэропорта Нью-Йорка в 2013 году. Данные предоставлены Бюро по статистике США, справку по ним можно найти по запросу `?flights`.

## Фильтрация строк - filter()

Прежде, чем начать, установим библиотеки:

```{r eval=FALSE, message=FALSE}
install.packages(c("nycflights13", "tidyverse"))
```

Теперь загрузим их в наше рабочее пространство:

```{r message=FALSE}
library(tidyverse)
library(nycflights13)
```

В наборе данных `flights` содержится следующая информация о переменных:

-   year (год), month (месяц), day (день) - дата вылета
-   dep_time - время вылета
-   arr_time - время прилета
-   sched_dep_time, sched_arr_time - время вылета и прилета по расписанию.
-   dep_delay, arr_delay - задержка вылета и прилета в минутах. Отрицательные значения означают досрочные вылеты / прилеты.
-   carrier - перевозчик
-   flight - номер рейса
-   tailnum - номер самолета
-   origin, dest - место отправления, место назначения
-   air_time - время полета в минутах
-   distance - расстояние в милях
-   hour, minute - часов, минут - время отлета, разбитое по часам и минутам
-   time_hour - дата и время полета по расписанию в формате даты.

Давайте сначала просто посмотрим на эти данные:

```{r}
head(flights)
```

Функция `filter()` позволяет отобрать наблюдения, основываясь на значениях. Первый аргумент - имя датафрейма (массива, базы данных), второй и последующие аргументы - выражения, позволяющие отфильтровать данные. Например, мы хотим отобрать все полеты, которые произошли 1 января:

```{r}
filter(flights, month == 1, day == 1)
```

Когда мы запускаем эту строку с кодом, `dplyr` выполняет фильтрующую операцию и выводит новый датафрейм. Однако, стоит учитывать, что исходные данные не меняются, и если нам необходимо сохранить эти изменения как отдельный объект, нам нужно использовать оператор присваивания, \<-, и задать новое имя:

```{r}
jan1 <- filter(flights, month == 1, day == 1)
```

R либо выводит на экран результаты либо сохраняет их в новую переменную (объект). Если мы хотим одновременно создать новую базу данных, сохранить в нее результаты фильтрации и вывести результат на экран, нужно код заключить в скобки:

```{r}
(dec25 <- filter(flights, month == 12, day == 25))
```

## Логические операторы

Очень часто функция `filter()` сопровождается логическими операторами ("и", "или" и др.). В этом случае, результат каждого выражения должен быть истинным, для того, чтобы строки были отобраны в новый набор.

::: callout-tip
**Запомним основные операторы**

**&** это “и”

**\|** это “или”

**!** “не равно”
:::

Графически различия между операторами можно представить следующим образом:

![](https://d33wubrfki0l68.cloudfront.net/01f4b6d39d2be8269740a3ad7946faa79f7243cf/8369a/diagrams/transform-logical.png)

Например, давайте отфильтруем данные так, чтобы у нас отображались два месяца - ноябрь и декабрь.

```{r}
filter(flights, month == 11 | month == 12)
```

Для некоторого упрощения кода полезно будет запомнить ["законы де Моргана"](https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD%D1%8B_%D0%B4%D0%B5_%D0%9C%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B0):

!(x & y) это то же самое, что и !x \| !y,

!(x \| y) равносильно !x & !y.

Например, если нам нужно отобрать полеты, которые задерживались (по прилетам и отлетам) не более чем на два часа, мы могли бы пойти двумя путями:

```{r}
filter(flights, !(arr_delay > 120 | dep_delay > 120))
# Или (результат идентичный)
filter(flights, arr_delay <= 120, dep_delay <= 120)
```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.  Создайте набор данных `arr_depay_over120`, в который отберите рейсы, прилет которых (arr_delay) задерживался на 2 или более часа.
2.  Выгрузите данные о рейсах в аэропорты Хьюстона - George Bush Intercontinental (IAH) или аэропорт William P Hobby (HOU) (по переменной `dest`) и сохраните их под именем `IAH_OR_HOU`.
3.  Отберите из таблицы все полеты, которые совершались в летние месяцы, и сохраните их под именем `summer_flights`.

## Упорядочение строк с функцией arrange()

Функция `arrange()` работает практически идентично с `filter()`, однако, вместо отбора строк она меняет их порядок. На входе функция берет датафрейм и наименования столбцов, по которым нужно сделать сортировку.Если таких столбцов несколько, каждая дополнительная колонка может быть использована для сортировки значений по уже отсортированным значениям предыдущего столбца.

Например, отсортируем полеты по дате (сначала по месяцу, потом по дню):

```{r}
arrange(flights, month, day)
```

Если нам нужно отсортировать что-то по убыванию, то функция `desc()` поможет нам перегруппировать значения в столбце. Например, отсортируем по убыванию значения задержки отлета:

```{r}
arrange(flights, desc(dep_delay))
```

\*\* ! Пропущенные значения (NA) - всегда располагаются в конце списка, независимо от направления сортировки\*\*. Давайте воспроизведем это свойство на примере, содержащем небольшое количество строк:

```{r}
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.  Отсортируйте полеты, чтобы найти те, что имеют наибольшие значения времени задержки прилета (`arr_delay`). Найдите также полеты, которые вылетели раньше времени по расписанию (вспоминаем функцию `tail()`).
2.  Найдите самые короткие (быстрые) полеты по переменной `air_time`.

## Отбор переменных с функцией select()

Достаточно часто нам для анализа не нужен весь наш набор данных, а только ограниченный набор переменных, с которыми мы работаем в какой-то момент времени. Удобно и полезно отобрать эти переменные и работать только с ними, особенно - если данных очень много, и количество переменных исчисляется сотнями или тысячами. Функция `select()` позволяет быстро отобрать переменные по их именам:

```{r}
select(flights, year, month, day)
```

```{r}

select(flights, year:day) # если переменные идут подряд, не обязательно перечислять все, можно воспользоваться оператором :
```

```{r}
select(flights, -(year:day))# знак минуса используется для того, чтобы, наоборот, исключить какие-то переменные
```

Есть еще несколько полезных функций, которые идут в паре с select() и делают жизнь проще:

`starts_with("abc")`: имена переменных начинаются на “abc”.

`ends_with("xyz")`: имена переменных заканчиваются на “xyz”.

`contains("ijk")`: имя переменной содержит “ijk”.

Иногда, в процессе обработки нам требуется переименовать переменную другим способом. Для этой цели подходит функция `rename`:

```{r}
rename(flights, tail_num = tailnum)
```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.  Использовать все возможные способы для того, чтобы отобрать переменные dep_time, dep_delay, arr_time и arr_delay.
2.  Что случится, если Вы включите одну и ту же переменную несколько раз в запрос функции select()?

## Создаем новую переменную с функцией mutate()

Да, сейчас явно что-то будет про мутации)))

Помимо того, что в процессе анализа нам приходится что-то постоянно отбирать (например, только жителей сел или городов, какой-то регион исследования, лиц определенного возраста и пола), часто приходится вычислять новые переменные на основе старых - высчитывать возраст, средний доход, количество детей и т. д.

В этом нам может помочь функция `mutate()`.

{{< iconify arcticons zte-task-manager size=42px >}}**Пример**: создадим новый набор `flights_sml`, куда отберем даты полета, расстояние и переменные, оканчивающиеся на "delay". Затем, содадим две новых переменных:

-   скорость (speed)
-   количество минут, которые самолет смог догнать при задержке рейса (как разность между задержкой вылета и прилета) (gain).

```{r}
flights_sml <- select(flights,
  year:day,
  ends_with("delay"),
  distance,
  air_time
)
mutate(flights_sml,
  gain = dep_delay - arr_delay,
  speed = distance / (air_time / 60)
)
```

Отметим, что мы можем «не отходя от кассы» использовать новые переменные в последующих расчетах для создания других переменных. Например, давайте создадим переменную `gain` (см. пример выше), но и посчитаем время полета в часах и среднее количество минут, которое нагонял самолет каждый час:

```{r}
mutate(flights_sml,
  gain = dep_delay - arr_delay,
  hours = air_time / 60,
  gain_per_hour = gain / hours
)
```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.  Сравните `` air_time` и `arr_time - dep_time ``. Что мы можем увидеть? Какие выводы можно сделать?
2.  Сравните `dep_time`, `sched_dep_time` и `dep_delay`. Как эти переменные связаны друг с другом?
3.  На основе уже знакомого нам набора `iris` создайте новую переменную - `sepal_ratio`, в которой посчитайте отношение длины чашелистника (`Sepal.Length`) к его ширине (`Sepal.Width`) и переменную `petal_ratio`, в которой посчитайте отношение длины лепестка (`Petal.Length`) к его ширине (`Petal.Width`). Сохраните данные в новом наборе `iris2`.

```{r}
#| code-fold: true
#| code-summary: "Если трудно, код можно посмотреть здесь"
iris2<- mutate(iris, sepal_ratio=Sepal.Length/Sepal.Width, petal_ratio=Petal.Length/Petal.Width)
```

## Изменения в нескольких переменных: mutate + across

Функция `mutate()` не обязательно означает, что мы будем вычислять новые переменные, вполне возможно мы будем как-то видоизменять те переменные, которые у нас уже есть в наборе данных. Например, мы хотим округлить значение только что полученных нами переменных `sepal_ratio` `petal_ratio` (см. самостоятельная работа выше, упражнение 3) до одного знака после запятой.

```{r echo=FALSE}
iris2<-as.tibble(iris2)
```

```{r message=FALSE, warning=FALSE}
mutate(iris2, across(c(sepal_ratio, petal_ratio), round, 1))# функция round используется для округления, цифра 1 означает, что мы будем округлять до одного знака после запятой 
```

Мы могли бы написать наш код чуть по-другому:

```{r}
iris2 %>%
  mutate(across(c(sepal_ratio, petal_ratio), round, 1))
```

::: callout-info
Стоп! Что за новый знак %\>%?

Это оператор, который позволяет сократить код и написать его по типу "матрешки". По-английски это называется "pipe-operator", здесь явная аналогия с телескопическими трубами, которые как бы вкладываются друг с другом. Так и наши различные функции dplyr следуют друг за другом уже без лиших аргументов и дублирования информации о наборе данных, лишних скобок и знаков \$, с помощью которых мы вводим имя переменной из набора. Код становится более читаемым и быстрым.
:::

Графически это можно представить вот так:

![](https://i0.wp.com/www.rforecology.com/pipes_image0.png) В `dplyr` оператор `%>%` попал из библиотеки `magrittr`, разработчики которой (Stefan Milton Bache, Hadley Wickham, Lionel Henry) преследовали две основных цели - сократить процесс написания кода и улучить его поддержку.

Названа библиотека в честь бельгийского художника-сюрреалиста Рене Магритта (1898-1967), который был известен своими остроумными и загадочными работами.

![](https://www.marcianocontemporary.com/wp-content/uploads/2022/02/rene-magritte-surrealiste-4094.jpeg) Причем тут трубы, спросите вы? А вот причем. У Магритта есть одна знаменитая картина -- «Вероломство образов», которую автор создал в 1929 году, увлекшись исследованием связи в искусстве между словами и образами. На картине изображена курительная трубка, выглядит она очень правдоподобно и нарисована тщательно. Вдоль нижней кромки полотна идет надпись, сделанная крупным каллиграфическим почерком: «Ceci n'est pas une pipe» - «Это не трубка». Картина породила множество интерпретаций, а сам автор по поводу нее сказал следующее: «Разве я написал неправду? Да, на картине нарисована трубка, но разве вы можете раскурить ее? Нет, потому что это всего лишь репрезентация. И если бы я написал "Это - трубка", то я бы солгал!».

![](https://arthive.net/res/media/img/oy800/work/3b9/295282@2x.webp) В общем, разработчики отдали дань творчеству автора, и в языке R появился новый оператор.

::: callout-tip
Чтобы быстро набрать пайп-оператор нужно одновременно нажать три клавиши:

**Ctrl+Shift+M**
:::

Начиная с версии R 4.1.0. в базовом R появился свой, «нативный» оператор, почти аналогичный `%>%`. Выглядит он как `|<` и "ведет себя" почти всегда так же. Есть некоторые нюансы, однако обсуждать мы их пока не будем. В качестве дополнительного матерала для тех, кто хочет действительно разобраться, отсылаю к статье: https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/

В настройках RStudio можно указать, какой именно операторв вы хотите использовать, но только один: ![](https://i.stack.imgur.com/wx9mN.png)

## Вычисление основных статистик с функцией `summarise()` и `group_by()`

Еще одна функция, которую мы изучим в рамках данного урока, -- `summarise()`. Как следует из названия, ее предназначение - рассчитывать какие-то новые значения на основе разнообразных функций - арифметических, статистических и др. Например, посчитаем среднее количество минут задержки вылета по набору полетов:

```{r}
summarise(flights, dep_delay_mean = mean(dep_delay, na.rm = TRUE))#na.rm = TRUE - данный аргумент удаляет из анализа все пропущенные значения (na - not avaliable, rm - remove), в противном случае вычисление среднего не возможно.
```

Функция `summarise()` часто идет в паре с другой функцией - `group_by()`, позволяющей провести анализ в отдельных подгруппах. Соответственно, когда мы применяем функции `dplyr` к сгруппированным данным, они автоматически рассчитываются для каждой подгруппы по отдельности. Например, мы можем применить код из примера выше, но предварительно сгруппировать данные по месяцам. Получится следующее:

```{r}
flights %>%
group_by(month) %>%
summarise(dep_delay_delay = mean(dep_delay, na.rm = TRUE))
```

Из таблицы видно, что рейсы в среднем задерживались чаще в летние месяцы (июне и июле) и декабре.

Приведем еще один пример совместного использования функций: проведем группировку по месту назначения и посчитаем общее количество полетов, среднее расстояние и среднюю задержку вылета в минутах, а также отберем 5 направлений с максимальными средними значениями по задержке вылетов и 5 направлений с минимальным задержками:

```{r}
delays <- flights %>%
  group_by(dest) %>%
  summarise(
    Всего = n(),
    Сред_расст = mean(distance, na.rm = TRUE),
    Ср_задержка_вылета = mean(arr_delay, na.rm = TRUE)
  ) %>% 
  arrange(desc(Ср_задержка_вылета)) %>% 
  slice(c(1:5, n()-5:n()))#slice отбирает строки, в скобках указываются номера, 1:5 - первые пять, а n()-5:n() - последние пять: n()-5 - номер строки минус 5 указывает на начало интервала,n() - общее количество строк - на конец. Мы могли бы указать это как 101:105, но допустим, мы не знаем, сколько строк, такой подход позволяет избежать ручного ввода номеров строк.
delays
```

Хотя в таблице :::callout-note Другие полезные функции: - median() - медиана - sd() - стандартное отклонение - min() - минимум - max() - максимум - first() - первое значение - nth() - значение определенного порядка (2, 3 и т.д.) - last() - последнее - n() - количество, размер группы - n_distinct() - количество уникальных значений :::

Например:

```{r}
flights %>%
na.omit() %>% #na.omit() - опускает пропущенные значения
group_by(month) %>%
  summarise(
    first_dep = first(dep_time),
    last_dep = last(dep_time)
  )
```

Еще пример: сгруппируем полеты по месту назначения и посчитаем уникальных перевозчиков, отсортировав нашу таблицу по месту назначения.

```{r}
flights %>%
na.omit() %>%
group_by(dest) %>%
  summarise(carriers = n_distinct(carrier)) %>%
  arrange(desc(carriers))
```

## Сочетание нескольких трансформаций (mutate, filter, summarise)

Группировка обычно сопутствует функции `summarise()`,но ее также можно сочетать с `mutate()` и `filter()`:

Например, мы хотим оставить в наболе данные только по наиболее популярным направлениям, принявшим не менее 5000 полетов за год:

```{r}
flights %>%
  group_by(dest) %>%
  filter(n()>17000)
```

Или, например, нам понадобилось посчитать по каждому направлению среднее количество полетов и сохранить его в переменной `mean`:

```{r}
flights %>%
  group_by(dest) %>%
  mutate(mean=mean(n()), .keep = "used") #.keep = "used" - оставляет в наборе только используемые переменные, в противном случае останется весь набор
```

## Создание новых переменных из старых по условиям: `if_else()` и `case_when()`

Такого рода перекодировки в исследовательской практике встречаются очень часто, когда мы хотим объединить некоторые значения в группы или заменить на другие значения. В решении этой задачи нам помогут две полезные функции: `if_else()`и `case_when()`.

### if_else()

Эта функция позволяет нам перекодировать значения, совпадающие или несовпадающие с некоторым условием, и одновременно обрабатывать отсутствующие значения. Для того, чтобы корректно применить эту функцию, нам нужно знать, какое значение в наших данных будет условно «истинным, корректным», какое «ложным, неправильным», и какое значение будут принимать пропущенные значения.

Общая формула для этой функции выглядит так:

`if_else(condition, true, false, missing = NULL)`

В аргументах функции задается следующее: `condition` - условие, которое мы проверяем `true` - значение, которое присваиваем, если условие выполняется `false`- значение, которое присваиваем, если условие не выполняется.

Приведем простой пример: Создадим вектор `x`, содержащий значения от -10 до +10, а затем все положительные значения заменим на 555:

```{r}
x <- c(-10:10)
if_else(x > 0, 555, x)
```

Конструкция `if_else()` очень часто используется вместе с `mutate()`для того, чтобы создать новые переменные.

Давайте создадим по набору `iris` новую переменную - `sepal_group`, которую перекодируем следующим образом: если значение `Sepal.Length` равно превышает среднее значение по всем наблюдениям - 1, если меньше - 0.

```{r}
iris3<-iris %>%
  mutate(sepal_group = if_else(Sepal.Length >= mean(Sepal.Length), 1, 0))
```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.Создайте в наборе`iris3` переменную `petal_group`, таким же способом, как мы только что создавали `sepal_group`. 2. Перекодируйте переменную `petal_group` с помощью `if_else()` так, чтобы 1 были трансформированы в "Больше среднего", а 0 - "Меньше среднего".

### `case_when()`

Когда условий несколько, можно использовать вложенные конструкции `if_else()`, но это не очень удобно. Вместо это лучше использовать специальную функцию `case_when()`, которая как раз предназначена для таких случаев.

Допустим, нам нужно перекодировать полеты из набора `flights` в зависимости от расстояния (`dist`)и создать переменную `dist_group`, в которой бы все полеты были бы распределены по четырем категориям: "менее 500 миль", "от 500 до 1000 миль", "от 1000 до 1500 миль" и "свыше 1500 миль". Получается, что нам нужно сверить множество условий, и, значит, это работа для `case_when ()`:

```{r}
flights %>%
  mutate(dist_group=  case_when(
  distance < 500 ~ "менее 500 миль",
  between(distance, 501, 1000) ~ "от 500 до 1000 миль",
  between(distance, 1001, 1500) ~ "от 1000 до 1500 миль",
  distance > 1500 ~ "свыше 1500 миль"), .keep="used")

```

{{< iconify arcticons writer size=42px >}} **Самостоятельное задание**:

1.  По набору `iris` создайте переменную sepal4cats, в которой бы содержались следующие значение о длине чашелистника: "Меньше 5,0", "от 5,1 до 5.8", "от 5.9 до 6.4" и "свыше 6.5".
2.  Посчитайте количество ирисов в каждой группе.

## Между «широким» и «длинным» форматом

Последнее, чем мы займемся в рамках данной темы, будет преобразование из «широкого» в «длинный» формат и обратно.

### Случай 1. Из «широкого» в «длинное»

Иногда случается так, что данные представлены в виде двумерной таблицы, уже подготовленной для описания, но такие данные не очень подходят для дальнейшего анализа.

Например, давайте посмотрим на таблицу взаимосвязей между уровнем дохода и религиозной принадлежностью:

```{r}
relig_income
```

Функция `pivot_longer()` приведет данные в более удобоваримый вид:

Комментарии: - `cols`- на основе каких переменных мы "переворачиваем" данные - `names_to` - как будет называться новая переменная (или переменные, если их несколько) - `values_to`- как будет называться переменная, содержащая частоту

```{r}
relig_income %>% 
  pivot_longer(
    cols = !religion, 
    names_to = "income", 
    values_to = "count"
  )
```

Давайте посмотрим на еще один вариант:

```{r}
billboard
```

Это данные о песнях их ротации по радиостанциям и о занимаемой позиции:

```{r}
billboard %>% 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  )
```

Нам возможно было бы интересно, сколько недель какой-либо трек продержался в чарте, но для этого нужно превратить неделю из строковой переменной в числовую. Это можно сделать следующим образом:

```{r}
billboard %>% 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    names_transform = readr::parse_number,
    values_to = "rank",
    values_drop_na = TRUE,
  )
```

### Случай 2: из «длинного» в «широкий» формат

Функция `pivot_wider()` является противоположной `pivot_longer()`: она расширяет набор данных за счет создания новых столбцов и сокращения количества строк. Например, это может быть полезно для написания отчетов или создания презентаций.

Чтобы посмотреть на эту функцию в действии, давайте создадим "длинные" данные из [набора о пингвинах](https://allisonhorst.github.io/palmerpenguins/):

```{r}
library(palmerpenguins)
penguins_long <- penguins %>%  
  mutate(sample = row_number()) %>%  
  pivot_longer(contains("_"),
               names_to = c("part", "measure" , "unit"),
               names_sep = "_",
               values_drop_na = TRUE)
penguins_long
```

А теперь превратим их в широкий формат:

```{r}
penguins_long |> 
  pivot_wider(names_from = c("part", "measure", "unit"),
              names_sep = "_",
              values_from = value)
```

## Самостоятельная работа

1.  Для каждого направления (`dest`) по набору `flights` посчитайте общее пройденное расстояние, используя функцию `sum()`.
2.  Перекодируйте переменную `month` таким образом, чтобы вместо цифр были названия месяцев.
3.  На основе переменной `air_time`, показывающей время в полете в минутах, создайте переменную `air_time_hours`, в которой время переведено в часы.
4.  Набор данных о пингвинах `penguins` из библиотеки `palmerpenguins`сгруппируйте по видам и полу пингвинов (`species`, `sex`) и посчитайте средний размер клюва в мм (`bill_length_mm`). Затем трансформируйте результаты так, чтобы получилась вот такая таблица (там будут пропущенные значения по полу, их нужно будет убрать):

```{r echo=FALSE, message=FALSE}
library(palmerpenguins)
penguins %>% 
  group_by(species, sex) %>% 
  summarise(mean_bill=mean(bill_length_mm)) %>% 
  na.omit() %>% 
  pivot_wider(names_from = sex, values_from = mean_bill) %>% 
  mutate(across(where(is.numeric), round, 1)) %>% 
  kbl() %>%
  kable_styling()
```

5.  Все результаты оформить в виде документа RMarkdown и опубликовать на RPubs. Результаты прикрепить в виде ссылки.
